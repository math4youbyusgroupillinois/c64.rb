require "c64/instruction"

module C64
  class InstructionDecoder

    # Flags:
    # :a add 1 to cycles if page boundery is crossed
    # :b add 1 to cycles if branch occurs on same page
    #    add 2 to cycles if branch occurs to different page

    # Thanks http://www.masswerk.at/6502/6502_instruction_set.html
    TABLE = {
      0x69 => [ :ADC, :immediate, 2, 2, nil ],
      0x65 => [ :ADC, :zeropage, 2, 3, nil ],
      0x75 => [ :ADC, :zeropage_x, 2, 4, nil ],
      0x6D => [ :ADC, :absolute, 3, 4, nil ],
      0x7D => [ :ADC, :absolute_x, 3, 4, :a ],
      0x79 => [ :ADC, :absolute_y, 3, 4, :a ],
      0x61 => [ :ADC, :indirect_x, 2, 6, nil ],
      0x71 => [ :ADC, :indirect_y, 2, 5, :a ],
      0x29 => [ :AND, :immediate, 2, 2, nil ],
      0x25 => [ :AND, :zeropage, 2, 3, nil ],
      0x35 => [ :AND, :zeropage_x, 2, 4, nil ],
      0x2D => [ :AND, :absolute, 3, 4, nil ],
      0x3D => [ :AND, :absolute_x, 3, 4, :a ],
      0x39 => [ :AND, :absolute_y, 3, 4, :a ],
      0x21 => [ :AND, :indirect_x, 2, 6, nil ],
      0x31 => [ :AND, :indirect_y, 2, 5, :a ],
      0x0A => [ :ASL, :accumulator, 1, 2, nil ],
      0x06 => [ :ASL, :zeropage, 2, 5, nil ],
      0x16 => [ :ASL, :zeropage_x, 2, 6, nil ],
      0x0E => [ :ASL, :absolute, 3, 6, nil ],
      0x1E => [ :ASL, :absolute_x, 3, 7, nil ],
      0x90 => [ :BCC, :relative, 2, 2, :b ],
      0xB0 => [ :BCS, :relative, 2, 2, :b ],
      0xF0 => [ :BEQ, :relative, 2, 2, :b ],
      0x24 => [ :BIT, :zeropage, 2, 3, nil ],
      0x2C => [ :BIT, :absolute, 3, 4, nil ],
      0x30 => [ :BMI, :relative, 2, 2, :b ],
      0xD0 => [ :BNE, :relative, 2, 2, :b ],
      0x10 => [ :BPL, :relative, 2, 2, :b ],
      0x00 => [ :BRK, :implied, 1, 7, nil ],
      0x50 => [ :BVC, :relative, 2, 2, :b ],
      0x70 => [ :BVC, :relative, 2, 2, :b ],
      0x18 => [ :CLC, :implied, 1, 2, nil ],
      0xD8 => [ :CLD, :implied, 1, 2, nil ],
      0x58 => [ :CLI, :implied, 1, 2, nil ],
      0xB8 => [ :CLV, :implied, 1, 2, nil ],
      0xC9 => [ :CMP, :immediate, 2, 2, nil ],
      0xC5 => [ :CMP, :zeropage, 2, 3, nil ],
      0xD5 => [ :CMP, :zeropage_x, 2, 4, nil ],
      0xCD => [ :CMP, :absolute, 3, 4, nil ],
      0xDD => [ :CMP, :absolute_x, 3, 4, :a ],
      0xD9 => [ :CMP, :absolute_y, 3, 4, :a ],
      0xC1 => [ :CMP, :indirect_x, 2, 6, nil ],
      0xD1 => [ :CMP, :indirect_y, 2, 5, :a ],
      0xE0 => [ :CPX, :immediate, 2, 2, nil ],
      0xE4 => [ :CPX, :zeropage, 2, 3, nil ],
      0xEC => [ :CPX, :absolute, 3, 4, nil ],
      0xC0 => [ :CPY, :immediate, 2, 2, nil ],
      0xC4 => [ :CPY, :zeropage, 2, 3, nil ],
      0xCC => [ :CPY, :absolute, 3, 4, nil ],
      0xC6 => [ :DEC, :zeropage, 2, 5, nil ],
      0xD6 => [ :DEC, :zeropage_x, 2, 6, nil ],
      0xCE => [ :DEC, :absolute, 3, 3, nil ],
      0xDE => [ :DEC, :absolute_x, 3, 7, nil ],
      0xCA => [ :DEX, :implied, 1, 2, nil ],
      0x88 => [ :DEY, :implied, 1, 2, nil ],
      0x49 => [ :EOR, :immediate, 2, 2, nil ],
      0x45 => [ :EOR, :zeropage, 2, 3, nil ],
      0x55 => [ :EOR, :zeropage_x, 2, 4, nil ],
      0x4D => [ :EOR, :absolute, 3, 4, nil ],
      0x5D => [ :EOR, :absolute_x, 3, 4, :a ],
      0x59 => [ :EOR, :absolute_y, 3, 4, :a ],
      0x41 => [ :EOR, :indirect_x, 2, 6, nil ],
      0x51 => [ :EOR, :indirect_y, 2, 5, :a ],
      0xE6 => [ :INC, :zeropage, 2, 5, nil ],
      0xF6 => [ :INC, :zeropage_x, 2, 6, nil ],
      0xEE => [ :INC, :absolute, 3, 6, nil ],
      0xFE => [ :INC, :absolute_x, 3, 7, nil ],
      0xE8 => [ :INX, :implied, 1, 2, nil ],
      0xC8 => [ :INY, :implied, 1, 2, nil ],
      0x4C => [ :JMP, :absolute, 3, 3, nil ],
      0x6C => [ :JMP, :indirect, 3, 5, nil ],
      0x20 => [ :JSR, :absolute, 3, 6, nil ],
      0xA9 => [ :LDA, :immediate, 2, 2, nil ],
      0xA5 => [ :LDA, :zeropage, 2, 3, nil ],
      0xB5 => [ :LDA, :zeropage_x, 2, 4, nil ],
      0xAD => [ :LDA, :absolute, 3, 4, nil ],
      0xBD => [ :LDA, :absolute_x, 3, 4, :a ],
      0xB9 => [ :LDA, :absolute_y, 3, 4, :a ],
      0xA1 => [ :LDA, :indirect_x, 2, 6, nil ],
      0xB1 => [ :LDA, :indirect_y, 2, 5, :a ],
      0xA2 => [ :LDX, :immediate, 2, 2, nil ],
      0xA6 => [ :LDX, :zeropage, 2, 3, nil ],
      0xB6 => [ :LDX, :zeropage_y, 2, 4, nil ],
      0xAE => [ :LDX, :absolute, 3, 4, nil ],
      0xBE => [ :LDX, :absolute_y, 3, 4, :a ],
      0xA0 => [ :LDY, :immediate, 2, 2, nil ],
      0xA4 => [ :LDY, :zeropage, 2, 3, nil ],
      0xB4 => [ :LDY, :zeropage_x, 2, 4, nil ],
      0xAC => [ :LDY, :absolute, 3, 4, nil ],
      0xBC => [ :LDY, :absolute_x, 3, 4, :a ],
      0x4A => [ :LSR, :accumulator, 1, 2, nil ],
      0x46 => [ :LSR, :zeropage, 2, 5, nil ],
      0x56 => [ :LSR, :zeropage_x, 2, 6, nil ],
      0x4E => [ :LSR, :absolute, 3, 6, nil ],
      0x5E => [ :LSR, :absolute_x, 3, 7, nil ],
      0xEA => [ :NOP, :implied, 1, 2, nil ],
      0x09 => [ :ORA, :immediate, 2, 2, nil ],
      0x05 => [ :ORA, :zeropage, 2, 3, nil ],
      0x15 => [ :ORA, :zeropage_x, 2, 4, nil ],
      0x0D => [ :ORA, :absolute, 3, 4, nil ],
      0x1D => [ :ORA, :absolute_x, 3, 4, :a ],
      0x19 => [ :ORA, :absolute_y, 3, 4, :a ],
      0x01 => [ :ORA, :indirect_x, 2, 6, nil ],
      0x11 => [ :ORA, :indirect_y, 2, 5, :a ],
      0x48 => [ :PHA, :implied, 1, 3, nil ],
      0x08 => [ :PHP, :implied, 1, 3, nil ],
      0x68 => [ :PLA, :implied, 1, 4, nil ],
      0x28 => [ :PHP, :implied, 1, 4, nil ],
      0x2A => [ :ROL, :accumulator, 1, 2, nil ],
      0x26 => [ :ROL, :zeropage, 2, 5, nil ],
      0x36 => [ :ROL, :zeropage_x, 2, 6, nil ],
      0x2E => [ :ROL, :absolute, 3, 6, nil ],
      0x3E => [ :ROL, :absolute_x, 3, 7, nil ],
      0x6A => [ :ROR, :accumulator, 1, 2, nil ],
      0x66 => [ :ROR, :zeropage, 2, 5, nil ],
      0x76 => [ :ROR, :zeropage_x, 2, 6, nil ],
      0x6E => [ :ROR, :absolute, 3, 6, nil ],
      0x7E => [ :ROR, :absolute_x, 3, 7, nil ],
      0x40 => [ :RTI, :implied, 1, 6, nil ],
      0x60 => [ :RTS, :implied, 1, 6, nil ],
      0xE9 => [ :SBC, :immediate, 2, 2, nil ],
      0xE5 => [ :SBC, :zeropage, 2, 3, nil ],
      0xF5 => [ :SBC, :zeropage_x, 2, 4, nil ],
      0xED => [ :SBC, :absolute, 3, 4, nil ],
      0xFD => [ :SBC, :absolute_x, 3, 4, :a ],
      0xF9 => [ :SBC, :absolute_y, 3, 4, :a ],
      0xE1 => [ :SBC, :indirect_x, 2, 6, nil ],
      0xF1 => [ :SBC, :indirect_y, 2, 5, :a ],
      0x38 => [ :SEC, :implied, 1, 2, nil ],
      0xF8 => [ :SED, :implied, 1, 2, nil ],
      0x78 => [ :SEI, :implied, 1, 2, nil ],
      0x85 => [ :STA, :zeropage, 2, 3, nil ],
      0x95 => [ :STA, :zeropage_x, 2, 4, nil ],
      0x8D => [ :STA, :absolute, 3, 4, nil ],
      0x9D => [ :STA, :absolute_x, 3, 5, nil ],
      0x99 => [ :STA, :absolute_y, 3, 5, nil ],
      0x81 => [ :STA, :indirect_x, 2, 6, nil ],
      0x91 => [ :STA, :indirect_y, 2, 6, nil ],
      0x86 => [ :STX, :zeropage, 2, 3, nil ],
      0x96 => [ :STX, :zeropage_y, 2, 4, nil ],
      0x8E => [ :STX, :absolute, 3, 4, nil ],
      0x84 => [ :STY, :zeropage, 2, 3, nil ],
      0x94 => [ :STY, :zeropage_x, 2, 4, nil ],
      0x8C => [ :STY, :absolute, 3, 4, nil ],
      0xAA => [ :TAX, :implied, 1, 2, nil ],
      0xA8 => [ :TAY, :implied, 1, 2, nil ],
      0xBA => [ :TSX, :implied, 1, 2, nil ],
      0x8A => [ :TXA, :implied, 1, 2, nil ],
      0x9A => [ :TXS, :implied, 1, 2, nil ],
      0x98 => [ :TYA, :implied, 1, 2, nil ],
    }

    def decode input
      Instruction.new *TABLE.fetch(input)
    end

  end
end
